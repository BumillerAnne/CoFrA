	package coFrA_ModellingFramework : coFrA_ModellingFramework = 'http://www.example.org/coFrA_ModellingFramework'
{
	class ContextInformation
	{
		attribute context : String[?];
		attribute history : Boolean[1];
		property qualitykinds : QualityKinds[?];
		property frequencykinds : FrequencyKinds[?];
		property privacykinds : PrivacyKinds[?];
		property environmentkinds : EnvironmentKinds[*|1] { ordered };
		invariant Specification: self.context->notEmpty();
	}
	class RequiredContextInformation extends ContextInformation
	{
		operation WhatThreat() : ThreatSituation[*]
		{
			body: self.contextthreatalgo.threatsituation->asSet() ;
		}
		operation WhatRisk() : Risk[*]
		{
			body: self.contextthreatalgo.threatsituation.threatriskalgo.risk->asSet() ;
		}
		property contextthreatalgo#requiredcontextinformation : ContextThreatAlgo[*|1] { ordered };
		property availablecontextinformation#requiredcontextinformation : AvailableContextInformation[?];
		invariant Specification: self.context->notEmpty();
		invariant HistoryCheck: self.contextthreatalgo->forAll(a|a.history=self.history);
		invariant
		PrivacyCheck: self.contextthreatalgo.threatsituation.threatriskalgo.risk.authenticationmechanism->forAll(a|a.privacykinds=self.privacykinds);
		invariant
		EnvironmentCheck: self.contextthreatalgo.threatsituation.threatriskalgo.risk.authenticationmechanism ->includesAll(self.environmentkinds);
	}
	class AvailableContextInformation extends ContextInformation
	{
		operation WhatThreatSituation() : ThreatSituation[*]
		{
			body: self.requiredcontextinformation.contextthreatalgo.threatsituation->asSet() ;
		}
		operation WhatRequiredInfo() : RequiredContextInformation[*]
		{
			body: self.requiredcontextinformation->asSet() ;
		}
		property requiredcontextinformation#availablecontextinformation : RequiredContextInformation[?];
	}
	class ContextThreatAlgo
	{
		property requiredcontextinformation#contextthreatalgo : RequiredContextInformation[*|1] { ordered };
		property threatsituation#contextthreatalgo : ThreatSituation[*|1] { ordered };
		attribute algo : String[?];
		attribute history : Boolean[1];
		invariant Specification: self.algo->notEmpty();
	}
	class ThreatSituation
	{
		operation WhatContextInformation() : RequiredContextInformation[*]
		{
			body: self.contextthreatalgo.requiredcontextinformation->asSet() ;
		}
		operation WhatRisk() : Risk[*]
		{
			body: self.threatriskalgo.risk->asSet() ;
		}
		property contextthreatalgo#threatsituation : ContextThreatAlgo[*|1] { ordered };
		property threatriskalgo#threatsituation : ThreatRiskAlgo[*|1] { ordered };
		attribute threat : String[?];
		invariant Specification: self.threat->notEmpty();
	}
	class ThreatRiskAlgo
	{
		property threatsituation#threatriskalgo : ThreatSituation[*|1] { ordered };
		property risk#threatriskalgo : Risk[*|1] { ordered };
		attribute algo : String[?];
		invariant Specification: self.algo->notEmpty();
	}
	class Risk
	{
		operation WhatAuthentication() : AuthenticationMechanism[*]
		{
			body: self.authenticationmechanism->asSet() ;
		}
		property threatriskalgo#risk : ThreatRiskAlgo[*|1] { ordered };
		property authenticationmechanism#risk : AuthenticationMechanism[*|1] { ordered };
		attribute fearedEvent : String[?];
		property factorkinds : FactorKinds[*|1] { ordered };
		invariant FactorCheck: self.authenticationmechanism->forAll(a|a.factorkinds<>self.factorkinds);
		invariant Specification: self.fearedEvent->notEmpty();
	}
	class AuthenticationMechanism
	{
		operation WhatRisk() : Risk[*]
		{
			body: self.risk->asSet() ;
		}
		property risk#authenticationmechanism : Risk[*|1] { ordered };
		attribute mechanism : String[?];
		property environmentkinds : EnvironmentKinds[*|1] { ordered };
		property deployabilitykinds : DeployabilityKinds[*|1] { ordered };
		property usabilitykinds : UsabilityKinds[*|1] { ordered };
		property factorkinds : FactorKinds[*|1] { ordered };
		property qualitykinds : QualityKinds[?];
		property privacykinds : PrivacyKinds[?];
		invariant
		UsabilityCheck: AuthenticationMechanism.allInstances()->select(a|a.factorkinds=0)->asSet().usabilitykinds<>0;
		invariant
		UsabilityCheck2: AuthenticationMechanism.allInstances()->select(a|a.factorkinds=1)->asSet().usabilitykinds<>1;
		invariant Specification: self.mechanism->notEmpty();
	}
	class CoFrA
	{
		property contextinformation : ContextInformation[?];
		property contextthreatalgo : ContextThreatAlgo[?];
		property threatriskalgo : ThreatRiskAlgo[?];
		property threatsituation : ThreatSituation[?];
		property risk : Risk[?];
		property authenticationmechanism : AuthenticationMechanism[?];
	}
	class QualityKinds
	{
		attribute value : String[?];
	}
	class FrequencyKinds
	{
		attribute value : String[?];
	}
	class PrivacyKinds
	{
		attribute value : String[?];
	}
	class EnvironmentKinds
	{
		attribute value : String[?];
	}
	class UsabilityKinds;
	class DeployabilityKinds
	{
		attribute value : String[?];
	}
	class FactorKinds
	{
		attribute value : String[?];
	}
}
